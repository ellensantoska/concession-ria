#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct Venda {
    int notaFiscal;
    float valor;
    char marca[50];
    int ano;
    char modelo[50];
    struct Venda* anterior;
    struct Venda* proximo;
} Venda;

// Estrutura de Vendedores
typedef struct Vendedor {
    char nome[100];
    char cpf[15];
    int matricula;
    Venda* vendas;
    struct Vendedor* prox;
} Vendedor;

typedef struct ListaVendedores {
    Vendedor* inicio;
} ListaVendedores;

void inicializarLista(ListaVendedores* lista) {
    lista->inicio = NULL;
}

// Criar vendedores
Vendedor* criarVendedor(const char* nome, const char* cpf, int matricula) {
    Vendedor* novo = (Vendedor*)malloc(sizeof(Vendedor));
    strcpy(novo->nome, nome);
    strcpy(novo->cpf, cpf);
    novo->matricula = matricula;
    novo->vendas = NULL;
    novo->prox = NULL;
    return novo;
}

// Inserir vendedores
void inserirVendedor(ListaVendedores* lista, const char* nome, const char* cpf, int matricula) {
    Vendedor* novo = criarVendedor(nome, cpf, matricula);

    if (lista->inicio == NULL) {
        novo->prox = novo;
        lista->inicio = novo;
    } else {
        Vendedor* atual = lista->inicio;
        while (atual->prox != lista->inicio) {
            atual = atual->prox;
        }
        atual->prox = novo;
        novo->prox = lista->inicio;
    }

    printf(" Vendedor %s inserido com sucesso.\n", nome);
}

void removerVendedor(ListaVendedores* lista, int matricula) {
    if (lista->inicio == NULL) {
        printf(" Lista vazia. Nenhum vendedor para remover.\n");
        return;
    }

    Vendedor* atual = lista->inicio;
    Vendedor* anterior = NULL;

    do {
        if (atual->matricula == matricula) {
            if (anterior == NULL) {
                Vendedor* ultimo = lista->inicio;
                while (ultimo->prox != lista->inicio) {
                    ultimo = ultimo->prox;
                }

                if (atual->prox == atual) {
                    lista->inicio = NULL;
                } else {
                    lista->inicio = atual->prox;
                    ultimo->prox = lista->inicio;
                }
            } else {
                anterior->prox = atual->prox;
                if (atual == lista->inicio)
                    lista->inicio = atual->prox;
            }

            free(atual);
            printf(" Vendedor removido com sucesso.\n");
            return;
        }

        anterior = atual;
        atual = atual->prox;
    } while (atual != lista->inicio);

    printf(" Vendedor com matrícula %d não encontrado.\n", matricula);
}

void listarVendedores(ListaVendedores* lista) {
    if (lista->inicio == NULL) {
        printf("Lista de vendedores vazia.\n");
        return;
    }

    Vendedor* atual = lista->inicio;
    printf("\n Lista de Vendedores:\n");
    do {
        printf("Nome: %s | CPF: %s | Matrícula: %d\n", atual->nome, atual->cpf, atual->matricula);
        atual = atual->prox;
    } while (atual != lista->inicio);
}

void cadastrarVenda(int matricula, ListaVendedores* lista){
    Venda* novaVenda = (Venda*)malloc(sizeof(Venda));
    char nomeVendedor[100];
    int vendedorEncontrado = 0;
    
    if(!novaVenda){
        printf("\nErro ao adicionar nova venda. - Contate o Suporte\n");
        return;
    }
    
    Vendedor* aux = lista->inicio;
    //Percorre a lista para encontrar o vendedor da matrícula desejada
    while(aux != NULL){
        if(aux->matricula == matricula){
            strcpy(nomeVendedor, aux->nome);
            vendedorEncontrado = 1;
            break;
        }
        aux = aux->prox;
    }
    //Flag para ver se a matricula corresponde a um vendedor
    if(vendedorEncontrado == 1){
        printf("\nCadastrando venda no vendedor: %s", nomeVendedor);
    }else{
        printf("\nVendedor não encontrado. Digite a matricula correta.");
        return;
    }
    
    printf("\nDigite as informações.\n");
    printf("Nº Nota fiscal: ");
    scanf("%d", &novaVenda->notaFiscal);
    printf("Marca: ");
    scanf("%s", novaVenda->marca);
    printf("Ano: ");
    scanf("%d", &novaVenda->ano);
    printf("Modelo: ");
    scanf("%s", novaVenda->modelo);
    
    novaVenda->proximo = NULL;
    novaVenda->anterior = NULL;
    
    //Verifica se o vendedor já fez alguma venda
    if(aux->vendas == NULL){
        aux->vendas = novaVenda;
    }else{
        Venda* temp = aux->vendas;
        while(temp->proximo != NULL) {
            temp = temp->proximo;
        }//Percorre a lista de vendas para inserir a nova venda no final
        temp->proximo = novaVenda;
        novaVenda->anterior = temp;
    }
    printf("\nNova venda cadastrada com sucesso.");
}

int main() {
    ListaVendedores lista;
    inicializarLista(&lista);

    int opcao;
    char nome[100], cpf[15];
    int matricula;

    do {
        printf("\n===== MENU =====\n");
        printf("1. Inserir Vendedor\n");
        printf("2. Remover Vendedor\n");
        printf("3. Listar Vendedores\n");
        printf("4. Cadastrar Venda\n");
        printf("0. Sair\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);
        getchar(); // Limpa buffer

        switch (opcao) {
            case 1:
                printf("Nome: ");
                fgets(nome, sizeof(nome), stdin);
                nome[strcspn(nome, "\n")] = '\0';  // Remove o \n
                printf("CPF: ");
                fgets(cpf, sizeof(cpf), stdin);
                cpf[strcspn(cpf, "\n")] = '\0';
                printf("Matrícula: ");
                scanf("%d", &matricula);
                getchar();

                inserirVendedor(&lista, nome, cpf, matricula);
                break;

            case 2:
                printf("Digite a matrícula do vendedor a remover: ");
                scanf("%d", &matricula);
                getchar();
                removerVendedor(&lista, matricula);
                break;

            case 3:
                listarVendedores(&lista);
                break;
            
            case 4:
                if(lista.inicio == NULL){
                    printf("\nNenhum vendedor cadastrado. Cadastre um vendedor para cadastrar uma venda.\n");
                    break;
                }
                printf("\nDigite a matrícula: ");
                scanf("%d", &matricula);
                getchar();
                cadastrarVenda(matricula,&lista);
                break;

            case 0:
                printf("Encerrando o programa...\n");
                break;

            default:
                printf("Opção inválida. Tente novamente.\n");
        }
    } while (opcao != 0);

    return 0;
}
